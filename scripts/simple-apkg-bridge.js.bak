#!/usr/bin/env node

/**
 * 简化版APKG解析桥接脚本
 *
 * 直接使用sqlite3和yauzl库解析APKG文件
 * 不依赖第三方anki-apkg-parser库
 */

const fs = require('fs');
const path = require('path');
const yauzl = require('yauzl');
const sqlite3 = require('sqlite3').verbose();

console.log('=== 简化版APKG解析桥接脚本启动 ===');
console.log('Node.js版本:', process.version);
console.log('工作目录:', process.cwd());
console.log('命令行参数:', process.argv);

/**
 * 解析APKG文件的主函数
 */
async function processApkg() {
    try {
        // 从命令行参数获取文件路径和输出目录
        const filePath = process.argv[2];
        const extractDir = process.argv[3];

        if (!filePath || !extractDir) {
            console.error('错误: 缺少必要参数 (文件路径和提取目录)');
            process.exit(1);
        }

        console.log(`输入文件: ${filePath}`);
        console.log(`输出目录: ${extractDir}`);

        // 检查文件是否存在
        if (!fs.existsSync(filePath)) {
            console.error(`错误: 文件不存在: ${filePath}`);
            process.exit(1);
        }

        // 确保输出目录存在
        if (!fs.existsSync(extractDir)) {
            console.log(`创建输出目录: ${extractDir}`);
            fs.mkdirSync(extractDir, { recursive: true });
        }

        // 解压APKG文件（实际上是zip文件）
        console.log(`开始解压APKG文件到: ${extractDir}`);
        await unzipFile(filePath, extractDir);
        console.log('解压完成');

        // 解析collection.anki2（SQLite数据库）
        console.log('开始分析deck结构...');
        const dbPath = path.join(extractDir, 'collection.anki2');

        if (!fs.existsSync(dbPath)) {
            console.error(`错误: 未找到数据库文件: ${dbPath}`);
            process.exit(1);
        }

        console.log(`打开数据库: ${dbPath}`);
        await parseAnkiDatabase(dbPath, extractDir);

        console.log('处理完成!');
        process.exit(0);
    } catch (error) {
        console.error('处理APKG文件时发生错误:', error);
        process.exit(1);
    }
}

/**
 * 解压ZIP文件
 */
function unzipFile(zipPath, outputDir) {
    return new Promise((resolve, reject) => {
        yauzl.open(zipPath, { lazyEntries: true }, (err, zipfile) => {
            if (err) {
                console.error('打开ZIP文件失败:', err);
                return reject(err);
            }

            console.log(`ZIP文件打开成功，条目数: ${zipfile.entryCount}`);
            let extractedCount = 0;

            zipfile.on('entry', (entry) => {
                extractedCount++;
                console.log(
                    `处理文件 ${extractedCount}/${zipfile.entryCount}: ${entry.fileName}`,
                );

                if (/\/$/.test(entry.fileName)) {
                    // 目录项，创建目录
                    fs.mkdirSync(path.join(outputDir, entry.fileName), {
                        recursive: true,
                    });
                    zipfile.readEntry();
                } else {
                    // 文件项，提取文件
                    zipfile.openReadStream(entry, (err, readStream) => {
                        if (err) {
                            console.error(`读取${entry.fileName}失败:`, err);
                            return zipfile.readEntry();
                        }

                        const outputPath = path.join(outputDir, entry.fileName);
                        const outputDirPath = path.dirname(outputPath);

                        if (!fs.existsSync(outputDirPath)) {
                            fs.mkdirSync(outputDirPath, { recursive: true });
                        }

                        const writeStream = fs.createWriteStream(outputPath);

                        writeStream.on('close', () => {
                            zipfile.readEntry();
                        });

                        readStream.pipe(writeStream);
                    });
                }
            });

            zipfile.on('end', () => {
                console.log(`解压完成，共提取 ${extractedCount} 个文件`);
                resolve();
            });

            zipfile.on('error', (err) => {
                console.error('解压过程中出错:', err);
                reject(err);
            });

            zipfile.readEntry();
        });
    });
}

/**
 * 解析Anki SQLite数据库
 */
async function parseAnkiDatabase(dbPath, outputDir) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
            if (err) {
                console.error('打开数据库失败:', err);
                return reject(err);
            }

            console.log('数据库打开成功');

            // 获取集合信息
            db.get('SELECT * FROM col', [], (err, colData) => {
                if (err) {
                    console.error('读取col表失败:', err);
                    db.close();
                    return reject(err);
                }

                // 获取所有笔记
                db.all('SELECT * FROM notes', [], (err, notes) => {
                    if (err) {
                        console.error('读取notes表失败:', err);
                        db.close();
                        return reject(err);
                    }

                    console.log(`找到 ${notes.length} 条笔记`);

                    try {
                        // 解析模型数据
                        let parsedModels = [];

                        if (colData && colData.models) {
                            try {
                                console.log('解析模型数据...');
                                const modelsData = JSON.parse(colData.models);
                                parsedModels = Object.values(modelsData);
                                console.log(`找到 ${parsedModels.length} 个模型`);

                                // 记录模型名称
                                parsedModels.forEach((model, index) => {
                                    console.log(
                                        `模型 ${index + 1}: ${model.name}, 字段数: ${model.flds ? model.flds.length : 0
                                        }`,
                                    );
                                });
                            } catch (e) {
                                console.error('解析模型数据时出错:', e);
                            }
                        }

                        // 处理笔记
                        console.log('处理笔记和模板...');
                        const cards = [];
                        let processedCount = 0;

                        for (const note of notes) {
                            // 提取字段 (Anki使用\u001f作为分隔符)
                            const fieldValues = note.flds ? note.flds.split('\u001f') : [];
                            const model = parsedModels.find((m) => m.id === note.mid);

                            if (model && model.flds && fieldValues.length > 0) {
                                // 创建字段对象
                                const fields = {};
                                model.flds.forEach((field, index) => {
                                    if (index < fieldValues.length) {
                                        fields[field.name] = fieldValues[index] || '';
                                    }
                                });

                                // 处理每个模板
                                if (model.tmpls && model.tmpls.length > 0) {
                                    for (const template of model.tmpls) {
                                        cards.push({
                                            template: {
                                                front: template.qfmt,
                                                back: template.afmt,
                                                name: template.name,
                                            },
                                            fields: fields,
                                            tags: note.tags,
                                            noteId: note.id,
                                        });
                                    }
                                }

                                processedCount++;
                                if (processedCount % 100 === 0) {
                                    console.log(`已处理 ${processedCount} 条笔记...`);
                                }
                            }
                        }

                        console.log(`处理完成，共生成 ${cards.length} 张卡片`);

                        // 提取媒体文件
                        console.log('检查媒体文件...');
                        const mediaFilePath = path.join(outputDir, 'media');
                        let mediaCount = 0;

                        if (fs.existsSync(mediaFilePath)) {
                            try {
                                const mediaContent = fs.readFileSync(mediaFilePath, 'utf8');
                                const mediaMap = JSON.parse(mediaContent);
                                mediaCount = Object.keys(mediaMap).length;
                                console.log(`找到 ${mediaCount} 个媒体文件`);
                            } catch (e) {
                                console.error('读取媒体文件时出错:', e);
                            }
                        } else {
                            console.log('未找到媒体文件');
                        }

                        // 将结果保存为JSON文件
                        const resultsPath = path.join(outputDir, 'parsed_results.json');
                        console.log(`保存解析结果到: ${resultsPath}`);

                        fs.writeFileSync(
                            resultsPath,
                            JSON.stringify(
                                {
                                    notes: notes.length,
                                    models: parsedModels.length,
                                    cards,
                                    mediaCount,
                                    parseTime: new Date().toISOString(),
                                },
                                null,
                                2,
                            ),
                        );

                        console.log('解析结果已保存');
                        db.close();
                        resolve();
                    } catch (error) {
                        console.error('处理数据时出错:', error);
                        db.close();
                        reject(error);
                    }
                });
            });
        });
    });
}

// 运行主函数
processApkg();
